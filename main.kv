<CheckboxRange>:
    group: "range_of_pages"
    size_hint_x: .4

<MainContainer>:
    orientation: "vertical"
    my_font_size: dp(25)
    MDToolbar:
        id: toolbar
        elevation: 10
        title: app.title
        pos_hint: {"x": 0, "top": 1}
        size_hint_y: .1
        left_action_items: [['menu', lambda x: app.root.ids["nav_drawer"].set_state("open")]]
        right_action_items: [["dots-vertical", lambda x: app.tbar_dots_callback(x)]]
    BoxLayout:
        orientation: "vertical"
        padding: dp(10)
        FloatLayout:
            GridLayout:
                cols: 1
                pos_hint: {"center_x": .5, "top": .96}
                size_hint: .3, .05
                MDLabel:
                    text: app.tr._("Print:")
                    text_size: self.size
                    halign: "center"
                    valign: "bottom"
                    font_size: root.my_font_size - 5
            GridLayout:
                rows: 1
                pos_hint: {"center_x": .5, "top": .9}
                size_hint: .5, .05
                CheckboxRange:
                    id: chbox_allpages
                    active: True
                    on_active:
                        # To avoid both of checkboxes to be inactive at the same time
                        if not self.active and not root.ids["chbox_range"].active: self.active = True
                        # Make some some widgets disabled and invisible
                        root.ids["tf_first_page"].disabled = True
                        root.ids["tf_first_page"].text = "1"
                        root.ids["tf_last_page"].text = ""
                        root.ids["tf_face_pages"].text = ""
                        root.ids["tf_verso_pages"].text = ""
                        root.ids["lbl_total_pages_for_printing"].opacity = 0
                        root.ids["lbl_necessary_sheets"].opacity = 0
                        root.ids["lbl_middle_of_booklet"].opacity = 0
                MDLabel:
                    text: app.tr._("All pages")
                    text_size: self.size
                    halign: "left"
                    valign: "center"
                    font_size: root.my_font_size - 7
            GridLayout:
                rows: 1
                pos_hint: {"center_x": .5, "top": .85}
                size_hint: .5, .05
                CheckboxRange:
                    id: chbox_range
                    on_active:
                        # To avoid both of checkboxes to be inactive at the same time
                        if not self.active and not root.ids["chbox_allpages"].active: self.active = True
                        # Make some some widgets disabled and invisible
                        root.ids["tf_first_page"].disabled = False
                        root.ids["tf_first_page"].text = ""
                        root.ids["tf_last_page"].text = ""
                        root.ids["tf_face_pages"].text = ""
                        root.ids["tf_verso_pages"].text = ""
                        root.ids["lbl_total_pages_for_printing"].opacity = 0
                        root.ids["lbl_necessary_sheets"].opacity = 0
                        root.ids["lbl_middle_of_booklet"].opacity = 0
                MDLabel:
                    text: app.tr._("The range")
                    text_size: self.size
                    halign: "left"
                    valign: "center"
                    font_size: root.my_font_size - 7
            GridLayout:
                rows: 2
                pos_hint: {"center_x": .5, "top": .8}
                size_hint: .1, .15
                MDTextField:
                    id: tf_first_page
                    disabled: True
                    hint_text: app.tr._("The first page")
                    helper_text: app.tr._("Can't be empty")
                    helper_text_mode: "on_error"
                    required: True
                    input_filter: "int"
                    text: "1"
                    font_size: root.my_font_size - 5
                MDTextField:
                    id: tf_last_page
                    hint_text: app.tr._("The last page")
                    helper_text: app.tr._("Can't be empty")
                    helper_text_mode: "on_error"
                    required: True
                    input_filter: "int"
                    font_size: root.my_font_size - 5
            MDRectangleFlatButton:
                id: btn_calculate
                text: app.tr._("Calculate")
                size_hint: .8, .1
                pos_hint: {"center_x": .5, "top": .6}
                font_size: root.my_font_size
                on_release:
                    root.calculate(root.ids["tf_first_page"].text, root.ids["tf_last_page"].text)
            GridLayout:
                rows: 2
                pos_hint: {"x": 0, "top": .45}
                size_hint: 1, .15
                MDTextField:
                    id: tf_face_pages
                    hint_text: app.tr._("Face pages")
                    font_size: root.my_font_size - 5
                MDTextField:
                    id: tf_verso_pages
                    hint_text: app.tr._("Verso pages")
                    font_size: root.my_font_size - 5
            GridLayout:
                rows: 3
                pos_hint: {"x": 0, "top": .22}
                size_hint: 1, .15
                MDLabel:
                    id: lbl_total_pages_for_printing
                    text: app.tr._("Total pages for printing: ")
                    text_size: self.size
                    halign: "left"
                    valign: "center"
                    font_size: root.my_font_size - 5
                    opacity: 0
                MDLabel:
                    id: lbl_necessary_sheets
                    text: app.tr._("Necessary sheets for printing: ")
                    text_size: self.size
                    halign: "left"
                    valign: "center"
                    font_size: root.my_font_size - 5
                    opacity: 0
                MDLabel:
                    id: lbl_middle_of_booklet
                    text: app.tr._("The middle of the booklet: ")
                    text_size: self.size
                    halign: "left"
                    valign: "center"
                    font_size: root.my_font_size - 5
                    opacity: 0
#            Widget:
#    #        MDRaisedButton:
#            MDRectangleFlatButton:
#                text: "Close"
#                pos_hint: {"right": 1, "y": 0}
#    #            on_release: app.root?

<ItemDrawer>:
    theme_text_color: "Custom"
    on_release:
        self.parent.set_color_item(self)
        app.nav_drawer_funcs_dict[self.text](self)
    IconLeftWidget:
        id: icon
        icon: root.icon
        theme_text_color: "Custom"
        text_color: root.text_color

<IconListItem>:
    IconLeftWidget:
        id: icon
        icon: root.icon
        theme_text_color: "Custom"
        text_color: root.text_color

<ContentNavigationDrawer>:
    orientation: "vertical"
    padding: "8dp"
    spacing: "8dp"

    AnchorLayout:
        anchor_x: "left"
        size_hint_y: None
        height: avatar.height
        Image:
            id: avatar
            size_hint: None, None
            size: "56dp", "56dp"
            source: "data/images/booklet.ico"
    MDLabel:
        text: app.title
        font_style: "Button"
        size_hint_y: None
        height: self.texture_size[1]
    MDLabel:
        text: "alkostuchkov@gmail.com"
        font_style: "Caption"
        size_hint_y: None
        height: self.texture_size[1]
    ScrollView:
        DrawerList:
            id: md_list

<MainScreen>:
    MDNavigationLayout:
        ScreenManager:
            MDScreen:
                MainContainer:
                    id: main_container
#                    Widget:
        MDNavigationDrawer:
            id: nav_drawer
            ContentNavigationDrawer:
                id: content_drawer

#            canvas:
#                Color:
#                    rgba: 0, 1, 0, 1
#                Rectangle:
#                    pos: self.pos
#                    size: self.size
